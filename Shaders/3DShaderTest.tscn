[gd_scene load_steps=4 format=2]

[sub_resource type="PlaneMesh" id=1]
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode specular_toon;

uniform float amplitude = 1.0;
uniform float animspeed = 1.0;
uniform float resolution = 1.0;
uniform sampler2D noise;
uniform sampler2D normalMap;

varying vec2 tex_position;

float height(vec2 position)
{
	float height = texture(noise, tex_position).x;	
}

void vertex(){
	tex_position = VERTEX.xz / 2.0 + 0.5;
	float height = texture(noise, tex_position).x;
	VERTEX.y += height * amplitude;
//	VERTEX.y += sin((VERTEX.x*resolution)+(TIME*animspeed))*amplitude + cos((VERTEX.z*resolution)+(TIME*animspeed))*amplitude;
}

void fragment() {
  float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
  RIM = 0.2;
  METALLIC = 0.0;
  ROUGHNESS = 0.01 * (1.0 - fresnel);
  ALBEDO = vec3(0.1, 0.3, 0.5) + (0.1 * fresnel);
}
"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 2 )

[node name="3DTestShaderRoot" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.00888598, 0 )
mesh = SubResource( 1 )
material/0 = SubResource( 7 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.402373, 0 )
